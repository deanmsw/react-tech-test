import { Link, useNavigate, useParams } from 'react-router-dom';
import { useQuery } from 'react-query';
import {
    Box, 
    Card, 
    CardBody, 
    CardHeader, 
    CircularProgress, 
    CircularProgressLabel, 
    Flex, 
    HStack, 
    Heading, 
    ListItem, 
    Stack, 
    StackDivider, 
    Text, 
    UnorderedList, 
    VStack 
} from '@chakra-ui/react';

import PageContainer from '../../components/PageContainer';
import PentestButton from '../../components/Button';
import { ExLink } from './types';

function Vulnerability() {

    const { id } = useParams();

    const navigate = useNavigate(); 

    const getData = async () => {
        const res = await fetch('/vulnerabilities.json');
        return res.json();
    };

    const { isLoading, error, data } = useQuery('myData', getData);

    if (isLoading) return <Text> 'Loading...' </Text>

    if (error) { console.log(error) };

    const obj = data?.data?.filter((v: any) => v.uuid === id);

    const {
        additional_affected_asset_fields,
        category,
        cves,
        cvss3_score,
        cvss_score,
        description,
        external_links,
        name, 
        nessus_plugin_family,
        nessus_plugin_id,
        remediation,
        severity
    } = obj?.[0] || {};

  return (
    <PageContainer
        title={`Vulnerability - ${name}`}
    >
        <PentestButton 
            label={'Back'}
            onClick={() => navigate(-1)} 
        />
          <Card
            color={'pentestWhite'}
          >
            {severity && 
              <CardHeader
                marginBottom={'32px'}
              >
                  <Heading size={'md'}>
                    <Text
                        as={'span'}
                        color={'pentestSecondary'}
                    >
                          Severity - {' '}
                    </Text> 
                        {severity}
                    </Heading>
              </CardHeader>
            }
            {category && 
              <CardHeader
                marginBottom={'32px'}
              >
                  <Heading size={'md'}>
                    <Text
                        as={'span'}
                        color={'pentestSecondary'}
                    >
                          Category - {' '}
                    </Text> 
                        {category}
                    </Heading>
              </CardHeader>
            }
              <CardBody>
                  <Stack divider={<StackDivider />} spacing={'4'}>
                      {description &&
                        <Box>
                            <Heading size={'xs'} textTransform={'uppercase'} color={'pentestSecondary'}>
                                Description
                            </Heading>
                            <Text pt={'2'} fontSize={'sm'}>
                                {description}
                            </Text>
                        </Box>
                      }
                      {nessus_plugin_family &&
                        <Box>
                            <Heading size={'xs'} textTransform={'uppercase'} color={'pentestSecondary'}>
                                Nessus Plugin Family
                            </Heading>
                            <Text pt={'2'} fontSize={'sm'}>
                                {nessus_plugin_family}
                            </Text>
                        </Box>
                      }
                      {nessus_plugin_id &&
                        <Box>
                            <Heading size={'xs'} textTransform={'uppercase'} color={'pentestSecondary'}>
                                Nessus Plugin ID
                            </Heading>
                            <Text pt={'2'} fontSize={'sm'}>
                                {nessus_plugin_id}
                            </Text>
                        </Box>
                      }
                      {remediation &&
                        <Box>
                            <Heading size={'xs'} textTransform={'uppercase'} color={'pentestSecondary'}>
                                Remediation
                            </Heading>
                            <Text pt={'2'} fontSize={'sm'}>
                                {remediation}
                            </Text>
                        </Box>
                      }
                      {additional_affected_asset_fields &&
                        <Box>
                            <Heading size={'xs'} textTransform={'uppercase'} color={'pentestSecondary'}>
                                Additional affected asset fields
                            </Heading>
                            <UnorderedList>
                                {additional_affected_asset_fields.map((item: string, index: number) => (
                                    <ListItem
                                        key={`${item} - ${index}`}
                                    >
                                        {item}
                                    </ListItem>
                                ))     
                                }
                            </UnorderedList>
                        </Box>
                      }
                      {cves &&
                        <Box>
                            <Heading size={'xs'} textTransform={'uppercase'} color={'pentestSecondary'}>
                                cves
                            </Heading>                
                            <UnorderedList>
                                {cves.map((item: string, index: number) => (
                                    <ListItem
                                        key={`${item} - ${index}`}
                                    >
                                        {item}
                                    </ListItem>
                                ))
                                }
                            </UnorderedList>
                        </Box>
                      }
                      <HStack>
                        {cvss_score &&
                            <VStack>
                                <Heading size={'xs'} textTransform={'uppercase'} color={'pentestSecondary'}>
                                  CVSS Score
                              </Heading>
                              <CircularProgress value={cvss_score * 10} color={'green.400'} size={'120px'}>
                                  <CircularProgressLabel>{cvss_score}</CircularProgressLabel>
                              </CircularProgress>
                            </VStack>
                        }
                        {cvss3_score &&
                            <VStack>
                                <Heading size={'xs'} textTransform={'uppercase'} color={'pentestSecondary'}>
                                  CVSS3 Score
                              </Heading>
                              <CircularProgress value={cvss3_score * 10} color={'green.400'} size={'120px'}>
                                  <CircularProgressLabel>{cvss3_score}</CircularProgressLabel>
                              </CircularProgress>
                            </VStack>
                        }
                      </HStack>
                      {external_links &&
                          <Box>
                              <Heading size={'xs'} textTransform={'uppercase'} color={'pentestSecondary'}>
                                  External Links
                              </Heading>
                              <Flex color={'black'} justifyContent={'space-around'}>
                                  {external_links.map((link: ExLink, index: number) => (
                                      <Link to={link.url} target={'blank'} key={`${link.title} - ${index}`}>
                                        <PentestButton label={link.title} />
                                    </Link>       
                                  ))
                                  }
                              </Flex>
                          </Box>
                      }
                  </Stack>
              </CardBody>
          </Card>
    </PageContainer>
  )
}

export default Vulnerability